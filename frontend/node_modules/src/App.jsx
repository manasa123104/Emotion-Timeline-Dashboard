import { useMemo, useRef, useState } from "react";
import Papa from "papaparse";
import {
  Chart as ChartJS,
  LineElement, PointElement, LinearScale, CategoryScale,
  Legend, Tooltip, Filler
} from "chart.js";
import { Line } from "react-chartjs-2";

ChartJS.register(LineElement, PointElement, LinearScale, CategoryScale, Legend, Tooltip, Filler);

// moving average
const smooth = (arr, k = 1) => {
  if (!k || k <= 1) return arr;
  const out = [], half = Math.floor(k / 2);
  for (let i = 0; i < arr.length; i++) {
    const s = Math.max(0, i - half), e = Math.min(arr.length, i + half + 1);
    const slice = arr.slice(s, e);
    out.push(slice.reduce((a, b) => a + b, 0) / slice.length);
  }
  return out;
};

const palette = ["#4cc9f0","#f72585","#3a86ff","#ffbe0b","#b5179e",
                 "#00f5d4","#8338ec","#fb5607","#06d6a0","#ef476f"];

export default function App() {
  const [headers, setHeaders] = useState([]);
  const [rows, setRows] = useState([]);
  const [active, setActive] = useState(new Set());
  const [k, setK] = useState(1);
  const [topK, setTopK] = useState(5);
  const fileRef = useRef();

  const emotionCols = useMemo(() => headers.slice(1), [headers]); // assume col0 = segment/index

  const handleCSV = (file) => {
    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: (res) => {
        const hs = res.meta.fields || [];
        const data = res.data.map(r => Object.fromEntries(hs.map(h => [h, r[h]])));
        setHeaders(hs);
        setRows(data);
        setActive(new Set());
      },
      error: (err) => alert("CSV parse error: " + err.message),
    });
  };

  // default top-K emotions by mean if none selected
  const defaultActive = useMemo(() => {
    if (!rows.length) return new Set();
    const means = emotionCols.map(c => {
      const vals = rows.map(r => Number(r[c] || 0));
      const m = vals.reduce((a,b)=>a+b,0) / Math.max(1, vals.length);
      return { c, m };
    }).sort((a,b)=>b.m-a.m).slice(0, Number(topK)||5);
    return new Set(means.map(x => x.c));
  }, [rows, emotionCols, topK]);

  const selected = active.size ? active : defaultActive;

  const data = useMemo(() => {
    const x = rows.map((_, i) => i + 1);
    const datasets = Array.from(selected).map((c, idx) => {
      const y = rows.map(r => Number(r[c] || 0));
      const ys = smooth(y, Number(k)||1);
      const color = palette[idx % palette.length];
      return {
        label: c,
        data: ys,
        borderColor: color,
        backgroundColor: color + "33",
        tension: 0.25,
        pointRadius: 0,
        fill: false
      };
    });
    return { labels: x, datasets };
  }, [rows, selected, k]);

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: { title: { display: true, text: "Segment" }, grid: { color: "rgba(255,255,255,.08)" } },
      y: { min: 0, max: 1, title: { display: true, text: "Score (0–1)" }, grid: { color: "rgba(255,255,255,.08)" } }
    },
    plugins: { legend: { position: "bottom", labels: { color: "#e8edf3" } } }
  };

  const toggle = (c) => {
    const next = new Set(active);
    next.has(c) ? next.delete(c) : next.add(c);
    setActive(next);
  };

  return (
    <div className="wrap">
      <header className="header">
        <h1>Emotional Timeline — React Viewer</h1>
        <p>Upload the CSV exported from your Streamlit dashboard to visualize 28-emotion timelines.</p>
      </header>

      <main className="grid">
        <section className="card">
          <div className="row">
            <input
              ref={fileRef}
              type="file"
              accept=".csv"
              onChange={(e)=>e.target.files?.[0] && handleCSV(e.target.files[0])}
            />
            <label>
              Smoothing
              <input type="number" min="1" max="15" value={k} onChange={(e)=>setK(Number(e.target.value||1))}/>
            </label>
            <label>
              Max emotions
              <input type="number" min="1" max="10" value={topK} onChange={(e)=>setTopK(Number(e.target.value||5))}/>
            </label>
            <button onClick={()=>{ setActive(new Set()); setK(1); }}>Reset</button>
          </div>

          {!!emotionCols.length && (
            <div className="pills">
              {emotionCols.map(c => (
                <span key={c}
                  className={`pill ${ (active.size?active:selected).has(c) ? "on" : ""}`}
                  onClick={()=>toggle(c)}>
                  {c}
                </span>
              ))}
            </div>
          )}
        </section>

        <section className="card chart">
          {rows.length ? <Line data={data} options={options}/> : <div className="empty">Upload a CSV to see the timeline.</div>}
        </section>

        <section className="card">
          <h3>Preview (first 10 rows)</h3>
          <div className="table">
            {rows.length ? (
              <table>
                <thead><tr>{headers.map(h => <th key={h}>{h}</th>)}</tr></thead>
                <tbody>
                  {rows.slice(0,10).map((r,i)=>(
                    <tr key={i}>{headers.map(h => <td key={h}>{String(r[h] ?? "").slice(0,48)}</td>)}</tr>
                  ))}
                </tbody>
              </table>
            ) : <div className="empty">No data</div>}
          </div>
        </section>
      </main>

      <footer className="footer">Built for the Emotional Timeline Dashboard</footer>
    </div>
  );
}
